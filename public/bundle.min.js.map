{"version":3,"file":"bundle.min.js","mappings":"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","sources":["webpack://ia-ts/./src/utils/MakeSetter/index.ts","webpack://ia-ts/./src/utils/Math/random.ts","webpack://ia-ts/./src/components/Network/index.ts","webpack://ia-ts/./src/components/Network/mutate.ts","webpack://ia-ts/./src/components/Game/Bird/index.ts","webpack://ia-ts/./src/components/Game/Collisions/index.ts","webpack://ia-ts/./src/components/Game/Scenery/Screens.ts","webpack://ia-ts/./src/components/Game/Pipe/index.ts","webpack://ia-ts/./src/components/Game/Scenery/index.ts","webpack://ia-ts/./src/components/Game/index.ts","webpack://ia-ts/./src/utils/MakeElement/index.ts","webpack://ia-ts/./src/App.ts"],"sourcesContent":["export function Setter(initialState) {\n    let value = initialState;\n    function getValue() {\n        return value;\n    }\n    function setValue(newState) {\n        value = newState;\n    }\n    return [getValue, setValue];\n}\n","export function getRandomNumberBetween(min, max, floor) {\n    if (floor)\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    return Math.random() * (max - min + 1) + min;\n}\n","import { getRandomNumberBetween } from '../../utils/Math/random';\nimport { mutate } from './mutate';\nfunction activation(x) {\n    // return Math.tanh(x);\n    return 1 / (1 + Math.exp(-x));\n}\nexport function MakeBrain(numberOfInputs, numberOfHiddenNodes, numberOfOutputs, learnRange, betterBrain) {\n    let biasesHiddenNodes = [];\n    let biasesOutputs = [];\n    let weightsInputsToHiddenNodes = [];\n    let weightsHiddenNodesToOutputs = [];\n    if (!betterBrain) {\n        for (let i = 0; i < numberOfInputs; i++) {\n            for (let j = 0; j < numberOfHiddenNodes; j++) {\n                weightsInputsToHiddenNodes[i] = weightsInputsToHiddenNodes[i]\n                    ? [\n                        ...weightsInputsToHiddenNodes[i],\n                        getRandomNumberBetween(-1, 1, false),\n                    ]\n                    : [getRandomNumberBetween(-1, 1, false)];\n                biasesHiddenNodes.push(getRandomNumberBetween(-1, 1, false));\n            }\n        }\n        for (let i = 0; i < numberOfOutputs; i++) {\n            biasesOutputs.push(getRandomNumberBetween(-1, 1, false));\n            for (let j = 0; j < numberOfHiddenNodes; j++) {\n                weightsHiddenNodesToOutputs[i] = weightsHiddenNodesToOutputs[i]\n                    ? [\n                        ...weightsHiddenNodesToOutputs[i],\n                        getRandomNumberBetween(-1, 1, false),\n                    ]\n                    : [getRandomNumberBetween(-1, 1, false)];\n            }\n        }\n    }\n    else {\n        const { weightsInputsToHiddenNodesMutated, biasesHiddenNodesMutated, weightsHiddenNodesToOutputsMutated, biasesOutputsMutated, } = mutate(betterBrain, learnRange);\n        biasesHiddenNodes = biasesHiddenNodesMutated;\n        biasesOutputs = biasesOutputsMutated;\n        weightsInputsToHiddenNodes = weightsInputsToHiddenNodesMutated;\n        weightsHiddenNodesToOutputs = weightsHiddenNodesToOutputsMutated;\n    }\n    return {\n        weightsInputsToHiddenNodes,\n        biasesHiddenNodes,\n        weightsHiddenNodesToOutputs,\n        biasesOutputs,\n        learnRange,\n        numberOfHiddenNodes,\n        numberOfOutputs,\n    };\n}\nconst brain = MakeBrain(1, 2, 3, 0);\nexport function getOutputs(inputs, numberOfOutputs, currBrain) {\n    const { biasesHiddenNodes } = currBrain;\n    const { biasesOutputs } = currBrain;\n    const { weightsInputsToHiddenNodes } = currBrain;\n    const { weightsHiddenNodesToOutputs } = currBrain;\n    let hiddenNodes = [];\n    let outputs = [];\n    for (let i = 0; i < inputs.length; i++) {\n        const inputsWeighted = inputs.map((input, j) => {\n            return input * weightsInputsToHiddenNodes[i][j];\n        });\n        hiddenNodes = biasesHiddenNodes.map((bias) => {\n            return activation(bias + inputsWeighted.reduce((a, b) => a + b));\n        });\n    }\n    for (let i = 0; i < numberOfOutputs; i++) {\n        const hiddenNodesWeighted = hiddenNodes.map((hiddenNode) => {\n            return (hiddenNode * weightsHiddenNodesToOutputs[i].reduce((a, b) => a + b));\n        });\n        outputs = biasesOutputs.map((bias) => {\n            return activation(bias + hiddenNodesWeighted.reduce((a, b) => a + b));\n        });\n    }\n    return outputs;\n}\n","import { getRandomNumberBetween } from '../../utils/Math/random';\nexport function mutate(Brain, range) {\n    let biasesHiddenNodesMutated = [];\n    let biasesOutputsMutated = [];\n    let weightsInputsToHiddenNodesMutated = [];\n    let weightsHiddenNodesToOutputsMutated = [];\n    biasesHiddenNodesMutated = Brain.biasesHiddenNodes.map((bias) => {\n        return bias + getRandomNumberBetween(-range, range, false) * 0.01;\n    });\n    biasesOutputsMutated = Brain.biasesOutputs.map((bias) => {\n        return bias + getRandomNumberBetween(-range, range, false) * 0.01;\n    });\n    weightsInputsToHiddenNodesMutated = Brain.weightsInputsToHiddenNodes.map((weights) => {\n        return weights.map((weight) => weight + getRandomNumberBetween(-range, range, false) * 0.01);\n    });\n    weightsHiddenNodesToOutputsMutated = Brain.weightsHiddenNodesToOutputs.map((weights) => {\n        return weights.map((weight) => weight + getRandomNumberBetween(-range, range, false) * 0.01);\n    });\n    return {\n        weightsInputsToHiddenNodesMutated,\n        biasesHiddenNodesMutated,\n        weightsHiddenNodesToOutputsMutated,\n        biasesOutputsMutated,\n    };\n}\n","import { MakeBrain } from '../../Network';\nimport { makeCollisionGround } from '../Collisions';\nimport { frames, Globals } from '..';\nexport const makeBird = (ctx, Screen, Sprites, betterBird) => {\n    const BirdProps = {\n        die: false,\n        width: 33,\n        height: 24,\n        x: 10,\n        y: 50,\n        jumpSize: 4.6,\n        gravity: 0.25,\n        velocity: 0,\n        currentFrame: 0,\n        points: 0,\n        moves: [\n            { spriteX: 0, spriteY: 0 },\n            { spriteX: 0, spriteY: 26 },\n            { spriteX: 0, spriteY: 52 },\n            { spriteX: 0, spriteY: 26 },\n        ],\n        brain() {\n            return Object.assign({}, MakeBrain(3, 6, 1, 1, betterBird));\n        },\n        vision(bird, pair) {\n            return pair\n                ? {\n                    birdTilGround: bird.y + bird.height,\n                    birdTilPipe: (bird.x + bird.width - pair.x) * -1,\n                    pipeGap: pair.gap,\n                }\n                : {\n                    birdTilGround: bird.y + bird.height,\n                    birdTilPipe: (bird.x + bird.width - Screen.width) * -1,\n                    pipeGap: 90,\n                };\n        },\n    };\n    const BirdActions = {\n        jump(bird) {\n            bird.velocity = -bird.jumpSize;\n        },\n        update(bird) {\n            if (makeCollisionGround(bird, Globals.ground)) {\n                BirdActions.kill(bird);\n                return;\n            }\n            bird.velocity += bird.gravity;\n            bird.y += bird.velocity;\n        },\n        updateCurrentFrame(bird) {\n            const rangeOfFrames = 10;\n            const passRange = frames() % rangeOfFrames === 0;\n            if (passRange) {\n                const incrementBase = 1;\n                const repeatBase = bird.moves.length;\n                const increment = incrementBase + bird.currentFrame;\n                bird.currentFrame = increment % repeatBase;\n            }\n        },\n        draw(bird) {\n            BirdActions.updateCurrentFrame(bird);\n            const { spriteX, spriteY } = bird.moves[bird.die ? 0 : bird.currentFrame];\n            ctx.drawImage(Sprites, spriteX, spriteY, // Sprite X, Sprite Y\n            bird.width, bird.height, // Tamanho do recorte na sprite\n            bird.x, bird.y, bird.width, bird.height);\n        },\n        kill(bird) {\n            bird.die = true;\n            bird.width = 0;\n            bird.height = 0;\n            bird.gravity = 0;\n            bird.velocity = 0;\n            bird.jumpSize = 0;\n            bird.points -= 4;\n        },\n    };\n    return {\n        BirdProps,\n        BirdActions,\n    };\n};\n","export function makeCollisionGround(bird, ground) {\n    const birdY = bird.y + bird.height;\n    const groundY = ground.y;\n    if (birdY >= groundY) {\n        return true;\n    }\n    return false;\n}\n","import { Setter } from '../../../utils/MakeSetter';\nimport { getOutputs } from '../../Network';\nimport { makeBird } from '../Bird';\nimport { makePipes } from '../Pipe';\nimport { makeGround } from '.';\nimport { ctx, Canvas, Globals, Sprites, messageGetReady, messageGameOver, background, BirdActions, } from '..';\nexport const [currentScreen, setCurrentScreen] = Setter({});\nconst members = 1;\nconst train = false;\nlet gen = 0;\nlet nBetterBird;\nexport const SCREENS = {\n    INDEX: {\n        start() {\n            Globals.FakeBird = makeBird(ctx, Canvas, Sprites, undefined).BirdProps;\n            Globals.pipes = makePipes(ctx, Canvas, Sprites);\n            Globals.ground = makeGround(ctx, Canvas, Sprites);\n            Globals.points = 0;\n            gen += 1;\n            if (train) {\n                currentScreen().click();\n            }\n        },\n        draw() {\n            background.draw();\n            BirdActions.draw(Globals.FakeBird);\n            Globals.ground.draw();\n            messageGetReady.draw();\n        },\n        click() {\n            setCurrentScreen(SCREENS.GAME);\n            currentScreen().start();\n        },\n        update() {\n            Globals.ground.update();\n        },\n    },\n    GAME: {\n        start() {\n            Globals.FakeBird = undefined;\n            if (gen >= 2) {\n                let currBetterBird = Globals.birds[0];\n                for (let i = 0; i < Globals.birds.length; i++) {\n                    if (Globals.birds[i].points > currBetterBird.points) {\n                        currBetterBird = Globals.birds[i];\n                    }\n                }\n                nBetterBird = () => currBetterBird\n                    ? [currBetterBird.brain(), { points: currBetterBird.points }]\n                    : undefined;\n            }\n            Globals.birds = [];\n            console.log(nBetterBird && nBetterBird()[1].points > 194);\n            for (let i = 0; i < (train ? members : 2); i++) {\n                Globals.birds.push(makeBird(ctx, Canvas, Sprites, nBetterBird && nBetterBird()[1].points > 194 && nBetterBird()[0]).BirdProps);\n                Globals.birds[i].die = false;\n            }\n        },\n        draw() {\n            background.draw();\n            Globals.pipes.draw();\n            Globals.ground.draw();\n            Globals.birds.map((bird) => BirdActions.draw(bird));\n            // Globals.points.draw();\n        },\n        click() {\n            return !train && BirdActions.jump(Globals.birds[1]);\n        },\n        update() {\n            var _a;\n            Globals.points += 1;\n            const currPair = ((_a = Globals.pipes.pairs[0]) === null || _a === void 0 ? void 0 : _a.x) >= 15\n                ? Globals.pipes.pairs[0]\n                : Globals.pipes.pairs[1] || undefined;\n            Globals.pipes.update(Globals.birds.filter((bird) => bird.die === false));\n            Globals.ground.update();\n            Globals.birds.map((bird, i) => {\n                if (bird.die === false) {\n                    BirdActions.update(bird);\n                    const currBrain = bird.brain();\n                    const vision = bird.vision(bird, currPair);\n                    const inputs = [\n                        vision.birdTilGround,\n                        vision.birdTilPipe,\n                        vision.pipeGap - 60,\n                    ];\n                    const outputs = getOutputs(inputs, currBrain.numberOfOutputs, currBrain);\n                    if (outputs[0] < 0.15) {\n                        if (!train && i === 0) {\n                            BirdActions.jump(bird);\n                        }\n                        else if (train) {\n                            BirdActions.jump(bird);\n                        }\n                    }\n                    bird.points += 1;\n                }\n                return bird;\n            });\n            const numberOfDies = Globals.birds.filter((bird) => bird.die === true);\n            if (numberOfDies.length >= (train ? members : 2)) {\n                setCurrentScreen(SCREENS.GAME_OVER);\n                currentScreen().start();\n            }\n        },\n    },\n    GAME_OVER: {\n        draw() {\n            messageGameOver.desenha();\n        },\n        update() {\n            // Do Something\n        },\n        click() {\n            setCurrentScreen(SCREENS.INDEX);\n            currentScreen().start();\n        },\n        start() {\n            if (train) {\n                currentScreen().click();\n            }\n        },\n    },\n};\n","import { BirdActions, frames } from '..';\nexport const makePipes = (ctx, Canvas, Sprites) => {\n    const pipes = {\n        width: 52,\n        height: 400,\n        gapPairs: 90,\n        pairs: [],\n        ground: {\n            spriteX: 0,\n            spriteY: 169,\n        },\n        sky: {\n            spriteX: 52,\n            spriteY: 169,\n        },\n        draw() {\n            pipes.pairs.forEach((pair) => {\n                const yRandom = pair.y;\n                const pipesGap = pair.gap;\n                const pipeSkyX = pair.x;\n                const pipeSkyY = yRandom;\n                // [Cano do Céu]\n                ctx.drawImage(Sprites, pipes.sky.spriteX, pipes.sky.spriteY, pipes.width, pipes.height, pipeSkyX, pipeSkyY, pipes.width, pipes.height);\n                // [Cano do Chão]\n                const pipesGroundX = pair.x;\n                const pipesGroundY = pipes.height + pipesGap + yRandom;\n                ctx.drawImage(Sprites, pipes.ground.spriteX, pipes.ground.spriteY, pipes.width, pipes.height, pipesGroundX, pipesGroundY, pipes.width, pipes.height);\n                pair.pipeSky = {\n                    x: pipeSkyX,\n                    y: pipes.height + pipeSkyY,\n                };\n                pair.pipeGround = {\n                    x: pipesGroundX,\n                    y: pipesGroundY,\n                };\n            });\n        },\n        hasCollisionWithBird(pair, birds) {\n            birds.map((bird) => {\n                const BirdHead = bird.y;\n                const BirdFoot = bird.y + bird.height;\n                if (bird.x + bird.width >= pair.x) {\n                    if (BirdHead <= pair.pipeSky.y) {\n                        BirdActions.kill(bird);\n                    }\n                    if (BirdFoot >= pair.pipeGround.y) {\n                        BirdActions.kill(bird);\n                    }\n                }\n                return bird;\n            });\n        },\n        update(birds) {\n            const pass100frames = frames() % 100 === 0;\n            if (pass100frames) {\n                pipes.pairs.push({\n                    x: Canvas.width,\n                    y: -150 * (Math.random() + 1),\n                    gap: pipes.gapPairs,\n                });\n            }\n            pipes.pairs.forEach((pair) => {\n                pair.x -= 2;\n                pipes.hasCollisionWithBird(pair, birds);\n                if (pair.x + pipes.width <= 0) {\n                    pipes.pairs.shift();\n                }\n            });\n        },\n    };\n    return pipes;\n};\n","export const makeBackground = (ctx, Canvas, Sprites) => {\n    const background = {\n        spriteX: 390,\n        spriteY: 0,\n        width: 275,\n        height: 204,\n        x: 0,\n        y: Canvas.height - 204,\n        draw() {\n            ctx.fillStyle = '#70c5ce';\n            ctx.fillRect(0, 0, Canvas.width, Canvas.height);\n            ctx.drawImage(Sprites, background.spriteX, background.spriteY, background.width, background.height, background.x, background.y, background.width, background.height);\n            ctx.drawImage(Sprites, background.spriteX, background.spriteY, background.width, background.height, background.x + background.width, background.y, background.width, background.height);\n        },\n    };\n    return background;\n};\nexport const makeGround = (ctx, Canvas, Sprites) => {\n    const ground = {\n        spriteX: 0,\n        spriteY: 610,\n        width: 224,\n        height: 112,\n        x: 0,\n        y: Canvas.height - 112,\n        update() {\n            const velocity = 1;\n            const repeat = ground.width / 2;\n            const move = ground.x - velocity;\n            ground.x = move % repeat;\n        },\n        draw() {\n            ctx.drawImage(Sprites, ground.spriteX, ground.spriteY, ground.width, ground.height, ground.x, ground.y, ground.width, ground.height);\n            ctx.drawImage(Sprites, ground.spriteX, ground.spriteY, ground.width, ground.height, ground.x + ground.width, ground.y, ground.width, ground.height);\n        },\n    };\n    return ground;\n};\n","import { MakeElement } from '../../utils/MakeElement';\nimport { Setter } from '../../utils/MakeSetter';\nimport { makeBird } from './Bird';\nimport { makeBackground } from './Scenery';\nimport { SCREENS, currentScreen, setCurrentScreen } from './Scenery/Screens';\n/// //////// Utils //////// ///\nexport const [frames, setFrames] = Setter(0);\n/// //////// Globals //////// ///\nexport const Globals = {};\n// const hasStarted = true;\n/// //////// Images //////// ///\nexport const Sprites = new Image();\nSprites.src = 'assets/sprites.png';\n/// //////// Canvas //////// ///\nexport const Canvas = MakeElement('canvas', 'canvas');\nCanvas.width = 320;\nCanvas.height = 480;\nexport const ctx = Canvas.getContext('2d');\n/// //////// Components //////// ///\nexport const background = makeBackground(ctx, Canvas, Sprites);\nexport const { BirdActions } = makeBird(ctx, Canvas, Sprites, undefined);\n/// //////// Message //////// ///\nexport const messageGetReady = {\n    sX: 134,\n    sY: 0,\n    w: 174,\n    h: 152,\n    x: Canvas.width / 2 - 174 / 2,\n    y: 50,\n    draw() {\n        ctx.drawImage(Sprites, messageGetReady.sX, messageGetReady.sY, messageGetReady.w, messageGetReady.h, messageGetReady.x, messageGetReady.y, messageGetReady.w, messageGetReady.h);\n    },\n};\nexport const messageGameOver = {\n    sX: 134,\n    sY: 153,\n    w: 226,\n    h: 200,\n    x: Canvas.width / 2 - 226 / 2,\n    y: 50,\n    desenha() {\n        ctx.drawImage(Sprites, messageGameOver.sX, messageGameOver.sY, messageGameOver.w, messageGameOver.h, messageGameOver.x, messageGameOver.y, messageGameOver.w, messageGameOver.h);\n    },\n};\n/// //////// Game //////// ///\nfunction loop() {\n    currentScreen().draw();\n    currentScreen().update();\n    setFrames(frames() + 1);\n    requestAnimationFrame(loop);\n}\nwindow.addEventListener('click', () => currentScreen().click && currentScreen().click());\nsetCurrentScreen(SCREENS.INDEX);\ncurrentScreen().start();\nloop();\nexport const Game = Canvas;\n","export function MakeElement(type, key) {\n    const Element = document.createElement(type);\n    Element.id = key;\n    Element.className = key;\n    return Element;\n}\n","var _a;\nimport { Game } from './components/Game';\n(_a = document.getElementById('root')) === null || _a === void 0 ? void 0 : _a.appendChild(Game);\n"],"names":["Setter","initialState","value","newState","getRandomNumberBetween","min","max","floor","Math","random","activation","x","exp","MakeBrain","numberOfInputs","numberOfHiddenNodes","numberOfOutputs","learnRange","betterBrain","biasesHiddenNodes","biasesOutputs","weightsInputsToHiddenNodes","weightsHiddenNodesToOutputs","weightsInputsToHiddenNodesMutated","biasesHiddenNodesMutated","weightsHiddenNodesToOutputsMutated","biasesOutputsMutated","Brain","range","map","bias","weights","weight","mutate","i","j","push","makeBird","ctx","Screen","Sprites","betterBird","BirdActions","jump","bird","velocity","jumpSize","update","ground","y","height","makeCollisionGround","Globals","gravity","kill","updateCurrentFrame","incrementBase","repeatBase","moves","length","increment","currentFrame","draw","spriteX","spriteY","die","drawImage","width","points","BirdProps","brain","Object","assign","vision","pair","birdTilGround","birdTilPipe","pipeGap","gap","currentScreen","setCurrentScreen","nBetterBird","gen","SCREENS","INDEX","start","FakeBird","Canvas","undefined","pipes","gapPairs","pairs","sky","forEach","yRandom","pipesGap","pipeSkyX","pipeSkyY","pipesGroundX","pipesGroundY","pipeSky","pipeGround","hasCollisionWithBird","birds","BirdHead","BirdFoot","shift","makePipes","repeat","move","makeGround","background","messageGetReady","click","GAME","currBetterBird","console","log","_a","currPair","filter","currBrain","outputs","inputs","hiddenNodes","inputsWeighted","input","reduce","a","b","hiddenNodesWeighted","hiddenNode","getOutputs","GAME_OVER","messageGameOver","desenha","setFrames","Image","src","type","key","Element","document","createElement","id","className","MakeElement","getContext","fillStyle","fillRect","makeBackground","sX","sY","w","h","window","addEventListener","loop","requestAnimationFrame","Game","getElementById","appendChild"],"sourceRoot":""}