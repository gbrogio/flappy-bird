(()=>{"use strict";function t(t){let i=t;return[function(){return i},function(t){i=t}]}function i(t,i,e){return e?Math.floor(Math.random()*(i-t+1)+t):Math.random()*(i-t+1)+t}function e(t){return 1/(1+Math.exp(-t))}function s(t,e,s,r,d){let n=[],a=[],p=[],o=[];if(d){const{weightsInputsToHiddenNodesMutated:t,biasesHiddenNodesMutated:e,weightsHiddenNodesToOutputsMutated:s,biasesOutputsMutated:h}=function(t,e){let s=[],r=[],d=[],n=[];return s=t.biasesHiddenNodes.map((t=>t+.01*i(-e,e,!1))),r=t.biasesOutputs.map((t=>t+.01*i(-e,e,!1))),d=t.weightsInputsToHiddenNodes.map((t=>t.map((t=>t+.01*i(-e,e,!1))))),n=t.weightsHiddenNodesToOutputs.map((t=>t.map((t=>t+.01*i(-e,e,!1))))),{weightsInputsToHiddenNodesMutated:d,biasesHiddenNodesMutated:s,weightsHiddenNodesToOutputsMutated:n,biasesOutputsMutated:r}}(d,r);n=e,a=h,p=t,o=s}else{for(let s=0;s<t;s++)for(let t=0;t<e;t++)p[s]=p[s]?[...p[s],i(-1,1,!1)]:[i(-1,1,!1)],n.push(i(-1,1,!1));for(let t=0;t<s;t++){a.push(i(-1,1,!1));for(let s=0;s<e;s++)o[t]=o[t]?[...o[t],i(-1,1,!1)]:[i(-1,1,!1)]}}return{weightsInputsToHiddenNodes:p,biasesHiddenNodes:n,weightsHiddenNodesToOutputs:o,biasesOutputs:a,learnRange:r,numberOfHiddenNodes:e,numberOfOutputs:s}}s(1,2,3,0);const r=(t,i,e,r)=>{const d={jump(t){t.velocity=-t.jumpSize},update(t){!function(t,i){return t.y+t.height>=i.y}(t,w.ground)?(t.velocity+=t.gravity,t.y+=t.velocity):d.kill(t)},updateCurrentFrame(t){if(h()%10==0){const i=1,e=t.moves.length,s=i+t.currentFrame;t.currentFrame=s%e}},draw(i){d.updateCurrentFrame(i);const{spriteX:s,spriteY:r}=i.moves[i.die?0:i.currentFrame];t.drawImage(e,s,r,i.width,i.height,i.x,i.y,i.width,i.height)},kill(t){t.die=!0,t.width=0,t.height=0,t.gravity=0,t.velocity=0,t.jumpSize=0,t.points-=4}};return{BirdProps:{die:!1,width:33,height:24,x:10,y:50,jumpSize:4.6,gravity:.25,velocity:0,currentFrame:0,points:0,moves:[{spriteX:0,spriteY:0},{spriteX:0,spriteY:26},{spriteX:0,spriteY:52},{spriteX:0,spriteY:26}],brain:()=>Object.assign({},s(3,6,1,1,r)),vision:(t,e)=>e?{birdTilGround:t.y+t.height,birdTilPipe:-1*(t.x+t.width-e.x),pipeGap:e.gap}:{birdTilGround:t.y+t.height,birdTilPipe:-1*(t.x+t.width-i.width),pipeGap:90}},BirdActions:d}},[d,n]=t({});let a,p=0;const o={INDEX:{start(){w.FakeBird=r(l,c,g,void 0).BirdProps,w.pipes=((t,i,e)=>{const s={width:52,height:400,gapPairs:90,pairs:[],ground:{spriteX:0,spriteY:169},sky:{spriteX:52,spriteY:169},draw(){s.pairs.forEach((i=>{const r=i.y,d=i.gap,n=i.x,a=r;t.drawImage(e,s.sky.spriteX,s.sky.spriteY,s.width,s.height,n,a,s.width,s.height);const p=i.x,o=s.height+d+r;t.drawImage(e,s.ground.spriteX,s.ground.spriteY,s.width,s.height,p,o,s.width,s.height),i.pipeSky={x:n,y:s.height+a},i.pipeGround={x:p,y:o}}))},hasCollisionWithBird(t,i){i.map((i=>{const e=i.y,s=i.y+i.height;return i.x+i.width>=t.x&&(e<=t.pipeSky.y&&y.kill(i),s>=t.pipeGround.y&&y.kill(i)),i}))},update(t){h()%100==0&&s.pairs.push({x:i.width,y:-150*(Math.random()+1),gap:s.gapPairs}),s.pairs.forEach((i=>{i.x-=2,s.hasCollisionWithBird(i,t),i.x+s.width<=0&&s.pairs.shift()}))}};return s})(l,c,g),w.ground=((t,i,e)=>{const s={spriteX:0,spriteY:610,width:224,height:112,x:0,y:i.height-112,update(){const t=s.width/2,i=s.x-1;s.x=i%t},draw(){t.drawImage(e,s.spriteX,s.spriteY,s.width,s.height,s.x,s.y,s.width,s.height),t.drawImage(e,s.spriteX,s.spriteY,s.width,s.height,s.x+s.width,s.y,s.width,s.height)}};return s})(l,c,g),w.points=0,p+=1},draw(){m.draw(),y.draw(w.FakeBird),w.ground.draw(),b.draw()},click(){n(o.GAME),d().start()},update(){w.ground.update()}},GAME:{start(){if(w.FakeBird=void 0,p>=2){let t=w.birds[0];for(let i=0;i<w.birds.length;i++)w.birds[i].points>t.points&&(t=w.birds[i]);a=()=>t?[t.brain(),{points:t.points}]:void 0}w.birds=[],console.log(a&&a()[1].points>194);for(let t=0;t<2;t++)w.birds.push(r(l,c,g,a&&a()[1].points>194&&a()[0]).BirdProps),w.birds[t].die=!1},draw(){m.draw(),w.pipes.draw(),w.ground.draw(),w.birds.map((t=>y.draw(t)))},click:()=>y.jump(w.birds[1]),update(){var t;w.points+=1;const i=(null===(t=w.pipes.pairs[0])||void 0===t?void 0:t.x)>=15?w.pipes.pairs[0]:w.pipes.pairs[1]||void 0;w.pipes.update(w.birds.filter((t=>!1===t.die))),w.ground.update(),w.birds.map(((t,s)=>{if(!1===t.die){y.update(t);const r=t.brain(),d=t.vision(t,i),n=function(t,i,s){const{biasesHiddenNodes:r}=s,{biasesOutputs:d}=s,{weightsInputsToHiddenNodes:n}=s,{weightsHiddenNodesToOutputs:a}=s;let p=[],o=[];for(let i=0;i<t.length;i++){const s=t.map(((t,e)=>t*n[i][e]));p=r.map((t=>e(t+s.reduce(((t,i)=>t+i)))))}for(let t=0;t<i;t++){const i=p.map((i=>i*a[t].reduce(((t,i)=>t+i))));o=d.map((t=>e(t+i.reduce(((t,i)=>t+i)))))}return o}([d.birdTilGround,d.birdTilPipe,d.pipeGap-60],r.numberOfOutputs,r);n[0]<.15&&0===s&&y.jump(t),t.points+=1}return t})),w.birds.filter((t=>!0===t.die)).length>=2&&(n(o.GAME_OVER),d().start())}},GAME_OVER:{draw(){f.desenha()},update(){},click(){n(o.INDEX),d().start()},start(){}}},[h,u]=t(0),w={},g=new Image;g.src="assets/sprites.png";const c=function(t,i){const e=document.createElement("canvas");return e.id=i,e.className=i,e}(0,"canvas");c.width=320,c.height=480;const l=c.getContext("2d"),m=((t,i,e)=>{const s={spriteX:390,spriteY:0,width:275,height:204,x:0,y:i.height-204,draw(){t.fillStyle="#70c5ce",t.fillRect(0,0,i.width,i.height),t.drawImage(e,s.spriteX,s.spriteY,s.width,s.height,s.x,s.y,s.width,s.height),t.drawImage(e,s.spriteX,s.spriteY,s.width,s.height,s.x+s.width,s.y,s.width,s.height)}};return s})(l,c,g),{BirdActions:y}=r(l,c,g,void 0),b={sX:134,sY:0,w:174,h:152,x:c.width/2-87,y:50,draw(){l.drawImage(g,b.sX,b.sY,b.w,b.h,b.x,b.y,b.w,b.h)}},f={sX:134,sY:153,w:226,h:200,x:c.width/2-113,y:50,desenha(){l.drawImage(g,f.sX,f.sY,f.w,f.h,f.x,f.y,f.w,f.h)}};window.addEventListener("click",(()=>d().click&&d().click())),n(o.INDEX),d().start(),function t(){d().draw(),d().update(),u(h()+1),requestAnimationFrame(t)}();const x=c;var v;null===(v=document.getElementById("root"))||void 0===v||v.appendChild(x)})();
//# sourceMappingURL=bundle.min.js.map